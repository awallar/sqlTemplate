   DECLARE

        src_interface_id integer;
        src_router_id integer;
        dst_interface_id integer;
        dst_router_id integer;

        TYPE CurTyp IS REF CURSOR;
        cv   CurTyp;
        srcInterfaceStmnt VARCHAR2(200);
        serviceRequestStmnt VARCHAR2(200);
        cercInstStmnt VARCHAR2(200);

        interfaceID  VARCHAR2(200);
        interfaceName  VARCHAR2(200);
        routingInstID  VARCHAR2(200);

        cerInstTmp CERC_INSTANCES%ROWTYPE;

        BEGIN

        -- get source router and interface ids
        SELECT id INTO src_router_id FROM routers WHERE name='$srcRouter';
        SELECT id INTO src_interface_id FROM interfaces
            WHERE router_id=src_router_id AND name='$srcInterface';

        -- get destination router and interface ids
        SELECT id INTO dst_router_id FROM routers WHERE name='$dstRouter';
        SELECT id INTO dst_interface_id FROM interfaces
            WHERE router_id=dst_router_id AND name='$dstInterface';

        -- update all service_requests currently pointing to srcInteface
        FOR service_request_row IN (SELECT id, routing_instance_id FROM service_request WHERE pe_interface_id=src_interface_id AND status!='removed')
        LOOP
            IF(service_request_row.id IS NULL OR (src_router_id=dst_router_id) THEN
                UPDATE service_requests
                    SET pe_interface_id=dst_interface_id
                    WHERE id=service_request_row.id;
                CONTINUE;
            END IF;


            --need to check routing_instance here


        END LOOP;





        -- update ecircuit_request_datas remote pe
        MERGE INTO ecircuit_request_datas erd1
        USING (SELECT erd.id FROM ecricuit_request_datas erd, service_requests sr
            WHERE erd.remote_pe_interface = src_interface_id
            AND sr.id = erd.service_request_id
            AND sr.status != 'removed') erd2
        ON(erd1.id = erd2.id)
        WHEN MATCHED THEN
            UPDATE SET
               erd1.remote_pe_interface_id = dst_interface_id


        -- update schedulers
        UPDATE schedulers
            SET pe_interface_id=dst_interface_id
            WHERE pe_interface_id=src_interface_id;






        srcInterfaceStmnt := 'SELECT i.id, i.name FROM INTERFACES i, ROUTERS r WHERE i.name=:1 AND r.name=:2';
        serviceRequestStmnt := 'SELECT sr.routing_instance_id FROM SERVICE_REQUESTS sr WHERE sr.pe_interface_id=:1';
        cercInstStmnt := 'SELECT * FROM CERC_INSTANCES ci WHERE ci.routing_instance_id=:1';

        -- search for ID in INTERFACES for a given interface name and router name

                OPEN cv for srcInterfaceStmnt USING '$srcInterface', '$srcRouter' ;
        LOOP
        FETCH cv INTO interfaceID, interfaceName;
        DBMS_OUTPUT.PUT_LINE(interfaceID);
        DBMS_OUTPUT.PUT_LINE(interfaceName);
        EXIT WHEN cv%NOTFOUND;
        END LOOP;
        CLOSE cv;

        -- search for routing_instance_id in SERVICE_REQUESTS using INTERFACE ID previously grabbed
        OPEN cv for serviceRequestStmnt USING interfaceID ;
        LOOP
        FETCH cv INTO routingInstID;
        DBMS_OUTPUT.PUT_LINE(routingInstID);
        EXIT WHEN cv%NOTFOUND;
        END LOOP;
        CLOSE cv;

        -- search for cerc_instance rows in CERC_INSTANCES using ROUTING_INSTANCE ID previously grabbed
        OPEN cv for cercInstStmnt USING routingInstID ;
        LOOP
        FETCH cv INTO cerInstTmp;
        DBMS_OUTPUT.PUT_LINE(cerInstTmp.ID);
        EXIT WHEN cv%NOTFOUND;
        END LOOP;
        CLOSE cv;

        END;
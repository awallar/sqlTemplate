DECLARE
    src_interface_id interfaces.id%TYPE;
    src_router_id    routers.id%TYPE;
    dst_interface_id interfaces.id%TYPE;
    dst_router_id    routers.id%TYPE;
    dst_ri_id        routing_instances.id%TYPE;
BEGIN
    -- get source router and interface ids
    SELECT id
    INTO   src_router_id
    FROM   routers
    WHERE  name = '$srcRouter';

    SELECT id
    INTO   src_interface_id
    FROM   interfaces
    WHERE  router_id = src_router_id
       AND name = '$srcInterface';

    -- get destination router and interface ids
    SELECT id
    INTO   dst_router_id
    FROM   routers
    WHERE  name = '$dstRouter';

    SELECT id
    INTO   dst_interface_id
    FROM   interfaces
    WHERE  router_id = dst_router_id
       AND name = '$dstInterface';

    -- rollback the service requests and routing instances
    FOR service_request_row IN (SELECT id,
                                       routing_instance_id
                                FROM   service_requests
                                WHERE  pe_interface_id = dst_interface_id
                                   AND ( status IS NULL
                                          OR status != 'removed' )) LOOP
        IF ( service_request_row.id IS NULL
              OR src_router_id = dst_router_id ) THEN
          UPDATE service_requests
          SET    pe_interface_id = src_interface_id
          WHERE  id = service_request_row.id;

          CONTINUE;
        END IF;

        --check routing_instance here
        BEGIN
            SELECT to_ri.id
            INTO   dst_ri_id
            FROM   routing_instances from_ri,
                   routing_instances to_ri
            WHERE  from_ri.id = service_request_row.routing_instance_id
               AND from_ri.name = to_ri.name
               AND to_ri.pe_router_id = src_router_id;

            UPDATE service_requests
            SET    pe_interface_id = src_interface_id,
                   routing_instance_id = dst_ri_id
            WHERE  id = service_request_row.id;
        EXCEPTION
            WHEN no_data_found THEN
              UPDATE service_requests
              SET    pe_interface_id = src_interface_id
              WHERE  id = service_request_row.id;
        END;
    END LOOP;

    -- rollback ecircuit_request_datas remote_pe_id if it matches
    merge INTO ecircuit_request_datas erd1
    USING (SELECT erd.id
           FROM   ecircuit_request_datas erd,
                  service_requests sr
           WHERE  erd.remote_pe_interface_id = dst_interface_id
              AND sr.id = erd.service_request_id
              AND ( sr.status != 'removed'
                     OR sr.status IS NULL )) erd2
    ON (erd1.id = erd2.id)
    WHEN matched THEN
      UPDATE SET erd1.remote_pe_interface_id = src_interface_id;

    -- rollback schedulers
    UPDATE schedulers
    SET    pe_interface_id = src_interface_id
    WHERE  pe_interface_id = dst_interface_id;
END; 
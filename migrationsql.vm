DECLARE
    src_interface_id interfaces.id%TYPE;
    src_router_id routers.id%TYPE;
    dst_interface_id interfaces.id%TYPE;
    dst_router_id routers.id%TYPE;

BEGIN
    -- get source router and interface ids
    SELECT id INTO src_router_id FROM routers
        WHERE name = '$srcRouter';

    SELECT id INTO src_interface_id FROM interfaces
        WHERE router_id = src_router_id
        AND name = '$srcInterface';

    -- get destination router and interface ids
    SELECT id INTO dst_router_id FROM routers
        WHERE name = '$dstRouter';

    SELECT id INTO dst_interface_id FROM interfaces
        WHERE router_id = dst_router_id
        AND name = '$dstInterface';


    -- update all service_requests currently pointing to srcInterface
    FOR service_request_row
        IN (SELECT id, routing_instance_id FROM service_requests
            WHERE pe_interface_id = src_interface_id
            AND status != 'removed')
    LOOP
        IF (service_request_row.id IS NULL OR src_router_id = dst_router_id) THEN
            UPDATE service_requests
                SET pe_interface_id = dst_interface_id
                WHERE id = service_request_row.id;
            CONTINUE;
        END IF;

        -- TODO need to check routing_instance here

    END LOOP;



    -- update ecircuit_request_datas remote_pe_id if it matches
    MERGE INTO ecircuit_request_datas erd1
    USING (SELECT erd.id FROM ecircuit_request_datas erd, service_requests sr
        WHERE erd.remote_pe_interface_id = src_interface_id
        AND sr.id = erd.service_request_id
        AND (sr.status != 'removed' OR sr.status IS NULL)) erd2
    ON (erd1.id = erd2.id)
    WHEN MATCHED THEN
        UPDATE SET erd1.remote_pe_interface_id = dst_interface_id;

    -- update schedulers
    UPDATE schedulers
        SET pe_interface_id = dst_interface_id
        WHERE pe_interface_id = src_interface_id;


END;